let { config } = require('../config.js')(runtime, this)
let singletonRequire = require('../lib/SingletonRequirer.js')(runtime, this)
config.save_log_file = false
config.show_debug_log = true
let _commonFunctions = singletonRequire('CommonFunction')
let resourceMonitor = require('../lib/ResourceMonitor.js')(runtime, global)
let { logInfo, errorInfo, warnInfo, debugInfo, infoLog } = singletonRequire('LogUtils')
let FloatyInstance = singletonRequire('FloatyUtil')
let openCvUtil = require('../lib/OpenCvUtil.js')
let paddleOcr = singletonRequire('PaddleOcrUtil')
let base64 = ''
let img = images.read('./Screenshot.jpg')
img = images.grayscale(img)
let SCALE_RATE = config.scaleRate || 1
let cvt = (v) => parseInt(v * SCALE_RATE)
let findBalls = images.findCircles(
  img,
  {
    param1: config.hough_param1 || 30,
    param2: config.hough_param2 || 30,
    minRadius: config.hough_min_radius || cvt(65),
    maxRadius: config.hough_max_radius || cvt(75),
    minDst: config.hough_min_dst || cvt(100),
    region: [config.device_width / 2, config.device_height / 2, config.device_width / 2, config.device_height / 2]
  }
)
findBalls = findBalls.map(ball => {
  ball.x = ball.x + config.device_width / 2
  ball.y = ball.y + config.device_height / 2
  return ball
})
debugInfo(['找到的球：{}', JSON.stringify(findBalls)])

let findPoint = openCvUtil.findByGrayBase64(img, base64, true)
debugInfo(['查找目标图片：{}', JSON.stringify(findPoint)])
let result = ''
let start = new Date()
let clipImg = images.clip(img, 350, 1330, 400, 130)
result = $ocr.recognizeText(clipImg)
console.log('$ocr识别:' + JSON.stringify(result) + '耗时：' + (new Date() - start) + 'ms')
start = new Date()
result = paddleOcr.recognize(img, [350, 1330, 400, 130])
logInfo('paddleOcr 识别结果：' + result + '耗时：' + (new Date() - start) + 'ms')
if (result) {
  result = result.replace(/\n/g, '').replace(/\s/g, '')
}

debugInfo(['使用paddleOcr识别倒计时时间文本: {}', result])
img.recycle()
let loop = true
sleep(3000)
let source = engines.myEngine().getSource() + ''
let count = engines.myEngine().execArgv.count || 0
if (loop && count++ < 100) {
  debugInfo(['第{}次运行 当前引擎id：{}', count, engines.myEngine().id])
  engines.execScriptFile(source, { path: source.substring(0, source.lastIndexOf('/')), arguments: { count: count } })
}